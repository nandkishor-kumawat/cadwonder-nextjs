generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Providers {
  google
  credentials
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  name            String
  username        String   @unique
  password        String?
  introduction    String?
  about           String?
  country         String?
  city            String?
  softwareSkills  String[] @map("software_skills")
  specializations String[]
  college         String?
  role            Role     @default(USER)
  profilePicture  String?  @map("profile_picture")
  coverPicture    String?  @map("cover_picture")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  socialLinks SocialLink[]
  experiences Experience[]
  educations  Education[]
  sessions    Session[]
  questions   Question[]
  answers     Answer[]
  models      Model[]
  comments    Comment[]
  likes       Likes[]

  @@map("users")
}

model Session {
  objectId  String     @id @default(auto()) @map("_id") @db.ObjectId
  id        String     @unique @map("session_id")
  userId    String     @map("user_id") @db.ObjectId
  expiresAt DateTime?
  provider  Providers? @default(credentials)
  userAgent String?
  ip        String?
  browser   String?
  os        String?
  user      User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("sessions")
}

model Experience {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  company     String
  position    String
  startYear   String @map("start_year")
  startMonth  String @map("start_month")
  endYear     String @map("end_year")
  endMonth    String @map("end_month")
  description String
  userId      String @map("user_id") @db.ObjectId
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Education {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  school      String
  field       String
  degree      String
  startYear   String
  endYear     String
  description String
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model SocialLink {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  url    String
  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  question    String
  slug        String
  description String?
  category    String
  price       Int      @default(0)
  software    String?
  fileDetails Files[]
  views       Int?     @default(0)
  answerCount Int?     @default(0) @map("answer_count")
  tags        String[]
  createdAt   DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@index([question, description])
  @@map("questions")
}

model Files {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  size        Int
  url         String
  textContent String?  @map("text_content")
  questionId  String?  @map("question_id") @db.ObjectId
  answerId    String?  @map("answer_id") @db.ObjectId
  modelId     String?  @map("model_id") @db.ObjectId
  searchId    String?  @map("search_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])
  model    Model?    @relation(fields: [modelId], references: [id])
  search   Search?   @relation(fields: [searchId], references: [id])

  @@index([textContent])
  @@map("files")
}

model Search {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  query     String
  createdAt DateTime @default(now()) @map("created_at")
  files     Files[]

  @@map("searches")
}

model Answer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  questionId  String   @map("question_id") @db.ObjectId
  answer      String
  fileDetails Files[]
  createdAt   DateTime @default(now()) @map("created_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Model {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  modelName   String   @map("model_name")
  description String
  slug        String
  category    String[]
  fileDetails Files[]
  createdAt   DateTime @default(now()) @map("created_at")
  likesCount  Int?     @default(0) @map("likes_count")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Likes[]

  @@map("models")
}

model Likes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  referenceId String   @map("reference_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  model       Model    @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, referenceId])
  @@map("likes")
}

model Comment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  associationId String   @map("association_id")
  comment       String
  userId        String   @map("user_id") @db.ObjectId
  createdAt     DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}
